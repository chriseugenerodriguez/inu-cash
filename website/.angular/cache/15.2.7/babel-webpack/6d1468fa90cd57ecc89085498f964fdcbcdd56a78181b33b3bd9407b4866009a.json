{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'), exports, require('@angular/core')) : typeof define === 'function' && define.amd ? define(['@angular/core', 'exports', '@angular/core'], factory) : factory(global.ng.core, global['ngx-parallax'] = {}, global.core);\n})(this, function (ɵngcc0, exports, core) {\n  'use strict';\n\n  /*! *****************************************************************************\r\n  Copyright (c) Microsoft Corporation. All rights reserved.\r\n  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n  this file except in compliance with the License. You may obtain a copy of the\r\n  License at http://www.apache.org/licenses/LICENSE-2.0\r\n  \r\n  THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n  KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n  WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n  MERCHANTABLITY OR NON-INFRINGEMENT.\r\n  \r\n  See the Apache Version 2.0 License for specific language governing permissions\r\n  and limitations under the License.\r\n  ***************************************************************************** */\n  /* global Reflect, Promise */\n  function __decorate(decorators, target, key, desc) {\n    var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  }\n  function __metadata(metadataKey, metadataValue) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n  }\n\n  // ngx-parallax\n  var Parallax = /** @class */function () {\n    function Parallax(element) {\n      var _this = this;\n      this.name = 'parallaxDirective';\n      // the following @Inputs are all part of the config object, which for \n      // brevity's sake, you can do a bunch of operations in bulk by passing \n      // in the config object; caveat for this is that angular 2 won't permit \n      // more than 9 keys being passed in an object via the template\n      this.cssKey = 'backgroundPosition';\n      this.cssProperty = 'backgroundPositionY';\n      this.axis = 'Y';\n      this.ratio = -.7;\n      this.initialValue = 0;\n      this.canMove = true;\n      this.cssUnit = 'px';\n      this.cb_context = null;\n      this.cb_args = [];\n      this.parallaxStyles = {};\n      this.isSpecialVal = false;\n      this.evaluateScroll = function () {\n        if (_this.canMove) {\n          var resultVal = void 0;\n          var calcVal = void 0;\n          if (_this.scrollElement instanceof Window) calcVal = _this.scrollElement.scrollY * _this.ratio + _this.initialValue;else calcVal = _this.scrollElement.scrollTop * _this.ratio + _this.initialValue;\n          if (_this.maxValue !== undefined && calcVal >= _this.maxValue) calcVal = _this.maxValue;else if (_this.minValue !== undefined && calcVal <= _this.minValue) calcVal = _this.minValue;\n          // added after realizing original setup wasn't compatible in Firefox\n          // debugger;\n          if (_this.cssKey === 'backgroundPosition') {\n            if (_this.axis === 'X') {\n              resultVal = 'calc(50% + ' + calcVal + _this.cssUnit + ') center';\n            } else {\n              resultVal = 'center calc(50% + ' + calcVal + _this.cssUnit + ')';\n            }\n          } else if (_this.isSpecialVal) {\n            resultVal = _this.cssValue + '(' + calcVal + _this.cssUnit + ')';\n          } else {\n            resultVal = calcVal + _this.cssUnit;\n          }\n          if (_this.cb) {\n            // console.log('this should be running')\n            _this.cb.apply(_this.cb_context, _this.cb_args);\n          }\n          _this.parallaxElement.style[_this.cssKey] = resultVal;\n        }\n      };\n      this.hostElement = element.nativeElement;\n    }\n    Parallax.prototype.ngOnInit = function () {\n      var cssValArray;\n      // console.log('%s initialized on element', this.name, this.hostElement);\n      // console.log(this);\n      for (var prop in this.config) {\n        this[prop] = this.config[prop];\n      }\n      this.cssProperty = this.cssProperty ? this.cssProperty : 'backgroundPositionY';\n      if (this.cssProperty.match(/backgroundPosition/i)) {\n        if (this.cssProperty.split('backgroundPosition')[1].toUpperCase() === 'X') {\n          this.axis = 'X';\n        }\n        this.cssProperty = 'backgroundPosition';\n      }\n      cssValArray = this.cssProperty.split(':');\n      this.cssKey = cssValArray[0];\n      this.cssValue = cssValArray[1];\n      this.isSpecialVal = this.cssValue ? true : false;\n      if (!this.cssValue) this.cssValue = this.cssKey;\n      this.ratio = +this.ratio;\n      this.initialValue = +this.initialValue;\n      this.parallaxElement = this.parallaxElement || this.hostElement;\n      if (!this.scrollElement) {\n        if (document.getElementById('parallaxScroll')) this.scrollElement = document.getElementById('parallaxScroll');else if (this.scrollerId) {\n          try {\n            this.scrollElement = document.getElementById(this.scrollerId);\n            if (!this.scrollElement) throw \"The ID passed through the parallaxConfig ('\" + this.scrollerId + \"') object was not found in the document.  Defaulting to tracking the scrolling of the window.\";\n          } catch (e) {\n            console.warn(e);\n            this.scrollElement = window;\n          }\n        } else this.scrollElement = window;\n      }\n      this.evaluateScroll();\n      this.scrollElement.addEventListener('scroll', this.evaluateScroll.bind(this));\n    };\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"config\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", String)], Parallax.prototype, \"cssKey\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", String)], Parallax.prototype, \"cssProperty\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", String)], Parallax.prototype, \"axis\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Number)], Parallax.prototype, \"ratio\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Number)], Parallax.prototype, \"initialValue\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"canMove\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", String)], Parallax.prototype, \"scrollerId\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Number)], Parallax.prototype, \"maxValue\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Number)], Parallax.prototype, \"minValue\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", String)], Parallax.prototype, \"cssUnit\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"cb\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"cb_context\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Array)], Parallax.prototype, \"cb_args\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"scrollElement\", void 0);\n    __decorate([core.Input(), __metadata(\"design:type\", Object)], Parallax.prototype, \"parallaxElement\", void 0);\n    Parallax = __decorate([__metadata(\"design:paramtypes\", [typeof (_a = typeof core.ElementRef !== \"undefined\" && core.ElementRef) === \"function\" && _a || Object])], Parallax);\n    Parallax.ɵfac = function Parallax_Factory(t) {\n      return new (t || Parallax)(ɵngcc0.ɵɵdirectiveInject(typeof (_a = typeof core.ElementRef !== \"undefined\" && core.ElementRef) === \"function\" && _a || Object));\n    };\n    Parallax.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n      type: Parallax,\n      selectors: [[\"\", \"parallax\", \"\"]],\n      inputs: {\n        cssKey: \"cssKey\",\n        cssProperty: \"cssProperty\",\n        axis: \"axis\",\n        ratio: \"ratio\",\n        initialValue: \"initialValue\",\n        canMove: \"canMove\",\n        cssUnit: \"cssUnit\",\n        cb_context: \"cb_context\",\n        cb_args: \"cb_args\",\n        parallaxElement: \"parallaxElement\",\n        scrollElement: \"scrollElement\",\n        config: \"config\",\n        scrollerId: \"scrollerId\",\n        maxValue: \"maxValue\",\n        minValue: \"minValue\",\n        cb: \"cb\"\n      }\n    });\n    (function () {\n      (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n    })();\n    return Parallax;\n    var _a;\n  }();\n  var ParallaxModule = /** @class */function () {\n    function ParallaxModule() {}\n    ParallaxModule_1 = ParallaxModule;\n    ParallaxModule.forRoot = function () {\n      return {\n        ngModule: ParallaxModule_1,\n        providers: []\n      };\n    };\n    ParallaxModule.ɵfac = function ParallaxModule_Factory(t) {\n      return new (t || ParallaxModule)();\n    };\n    ParallaxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n      type: ParallaxModule\n    });\n    ParallaxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n    (function () {\n      (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n    })();\n    (function () {\n      (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ParallaxModule, {\n        declarations: [Parallax],\n        exports: [Parallax]\n      });\n    })();\n    return ParallaxModule;\n    var ParallaxModule_1;\n  }();\n  exports.Parallax = Parallax;\n  exports.ParallaxModule = ParallaxModule;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}